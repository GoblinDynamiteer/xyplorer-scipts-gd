    include_once "..\const\include.xys";

    //Gets IMDB-id from string, returns ID in format tt######
    function string_extract_imdb($string)
    {
        $id = regexmatches($string, $REGEX_STRING_IMDB_ID);

        if($id == "")
        {
            msg "Could not extract IMDb-id from string!";
            return 0;
        }

        else
        {
            return $id;
        }
    }

    /* Check / Trim TheTVDb string */
    function string_thetvdb_fix_url($string)
    {
        if(!check_thetvdb_url_in_string($string))
        {
            msg "Input is not a TheTVDb URL!";
            return 0;
        }

        $string = regexreplace($string,
            $REGEX_STRING_URL_THETVDB_LANGUAGE_SUFFIX);

        return $string;
    }

    function string_remove_crlf($string)
    {
        return replace($string, <crlf>);
    }

    /* Example: Gets S01E09, returns S01E10 */
    function string_episode_next($episode)
    {
        $season_episode = regexmatches($episode, $REGEX_DIGIT_2);
        $season = gettoken($season_episode, 1, "|");
        $number = gettoken($season_episode, -1, "|") + 1;
        return "S" . format($season, "00") . "E" . format($number, "00");
    }

    function string_season_next($episode)
    {
        $season_episode = regexmatches($episode, $REGEX_DIGIT_2);
        $season = gettoken($season_episode, 1, "|") + 1;
        return "S" . format($season, "00") . "E01";
    }

    function string_movie_first_letter($string)
    {
        /* Skip The. An. A. */
        if(regexmatches($string, $REGEX_MOVIE_PREFIX_THE) != "")
        {
            $first_letter = substr($string, 4, 1);
        }

        elseif(regexmatches($string, $REGEX_MOVIE_PREFIX_AN) != "")
        {
            $first_letter = substr($string, 3, 1);
        }

        elseif(regexmatches($string, $REGEX_MOVIE_PREFIX_A) != "")
        {
            $first_letter = substr($string, 2, 1);
        }

        else
        {
            $first_letter = substr($string, 0, 1);
        }

        /* If first letter is a digit */
        if(regexmatches($first_letter, $REGEX_DIGIT_1) != "")
        {
            $first_letter = "#";
        }
        /* V and W is in same folder: 'WV' */
        elseif(($first_letter == "V") || ($first_letter == "W"))
        {
            $first_letter = "VW";
        }

        else
        {
            $first_letter = $first_letter;
        }

        return $first_letter;
    }

    function string_regex_movie_resolution($string)
    {
        $data = regexmatches($string, $REGEX_RELEASE_RESOLUTION);
        $retval = $data ? recase($data, "lower") : "Unknown Res";
        return $retval;
    }

    function string_regex_movie_source($string)
    {
        $data = regexmatches($string, $REGEX_RELEASE_SOURCE);
        $retval = $data ? $data : 0;
        return $retval;
    }

    function string_regex_movie_special($string)
    {
        $data = regexmatches($string, $REGEX_RELEASE_SPECIAL);
        $data = replace($data, ".dc.", "Director's Cut");
        $data = replace($data, "|", " | ");
        $retval = $data ? $data : 0;
        return $retval;
    }

    function string_regex_movie_scene($string)
    {
        $data = regexmatches($string, $REGEX_RELEASE_SCENE_SPECIAL);
        $retval = $data ? $data : 0;
        return $retval;
    }

    function string_regex_season_episode($string)
    {
        $data = regexmatches($string, $REGEX_SEASON_EPISODE);
        $retval = $data ? $data : 0;
        return $retval;
    }

    function string_regex_season_from_season_episode($string)
    {
        $data = regexmatches($string, $REGEX_TWO_DIGIT);
        return format(gettoken($data, 1, "|"));
    }

    function string_regex_episode_from_season_episode($string)
    {
        $data = regexmatches($string, $REGEX_TWO_DIGIT);
        return format(gettoken($data, 2, "|"));
    }

    function string_regex_year($string)
    {
        $data = regexmatches($string, $REGEX_DIGIT_4); // Fix regex 2/1xxx
        $retval = 0;

        if($data)
        {
            $retval = gettoken($data, 1, "|");
        }

        return $retval;
    }

    function string_regex_movie_title_from_release($string)
    {
        $data = regexmatches($string, $REGEX_MOVIE_TITLE);
        $retval = 0;

        if($data)
        {
            $retval = gettoken($data, 1, "|");
            $retval = replace($retval, ".", " ");
            $retval = trim($retval);
        }

        return $retval;
    }

    /* Tries to determine the TV-show name from release folder name */
    function string_regex_tv_title_from_release($string)
    {
        $name = regexmatches($string, $REGEX_TV_NAME);

        if(!$name)
        {
            $name = regexmatches($string, $REGEX_TV_NAME_EPISODE);
        }

        return replace($name, ".", " ");
    }

    /* Gest S## from release folder name */
    function string_regex_tv_season_from_release($string)
    {
        $season = regexmatches($string, "S\d{2}");
        return $season;
    }

    /* Generate item for pupupmenu */
    function string_generate_popup_menu_item(
        $display_name, $return_string, $icon_location, $menu_level)
    {
        $indentation = "";

        while ($menu_level--)
        {
            $indentation = $indentation . " ";
        }

        return  $indentation . $display_name . ";" .
                $return_string . ";" . $icon_location . "|";

    }
