 include_once "..\const\include.xys";

	//Moves new.txt to ds/info and backups .db files
	function backupDBfiles(void){
		$now = now("yyyy-mm-dd-hh-nn");
		$backupFolder = new("D:\Google Drive\Scriptstuff\MediaDb\bak\" . $now, "dir");
		backupto $dsInfo, $newTxt;
		backupto $dsInfo, $missingEpsTxt;
		backupto $backupFolder, $newTxt;
		backupto $backupFolder, $missingEpsTxt;
		$dbFiles = listfolder($dbFolder, "*.db", 1);
		//$dbFiles = quicksearch("*.db", $dbFolder, "|");
		copyto $backupFolder , $dbFiles;
	}

	//Returns list of video files in path, in subfolders
	function getLocalTVFiles($path){
		$fileList =  "";
		//function istFiles in getFileInfo.xys
		foreach($ext, $vidExtensions, |){
			$fileList = $fileList . listFiles($path, $ext);
		}
		//replace(string, search, [replacement=""], [matchcase=0], [start=1], [count=-1])
		//removes path from list
		$data = replace($fileList, $path . "\");
		return $data;
	}

		function getSeasonsFolders($path){
		//listfolder([path=<curpath>], [pattern=*], [flags], [separator="|"])
		$data = listfolder($path, , 2 + 4);
		return $data;
	}

	function getLastSeasonFolder($path){
		//listfolder([path=<curpath>], [pattern=*], [flags], [separator="|"])
		$data = getSeasonsFolders($path);
		$data = getLastListItem($data);
		return $data;
	}

	//Finds and returns the last episode
	function getLastLocalEpisode($path){
		status "Getting episode file list", "0000FF", "progress";
		$seasonFolders = getSeasonsFolders($path);
		//Sorts list
		$seasonFolders = sortList($seasonFolders);
		//gets last folder name
		$lastSeason = getLastListItem($seasonFolders);
		//Lists video-files in last season folder
		$files = getLocalTVFiles($path . "\" . $lastSeason);
		//Extracts S##E## from file-list, as |-separated list
		$episodes = getSE($files);
		//Sorts the list and returns the last item
		$episodes = sortList($episodes);
		return recase(getLastListItem($episodes), "upper");
	}


		//Adds newly added tv-shows to textfile
	function addNewTVEpisode($episode, $show){
		$today = now("yyyy-mm-dd");
		$mazeID = getDbTVMaze($show);
		//American Dad has other season ordering on TVMaze, than releases
		if($show == "American Dad"){
			$episode = replace($episode, "S14E", "S13E");
		}
		$title = pythonTVMazeEpisode($mazeID, "name", $episode);
		$airdate = pythonTVMazeEpisode($mazeID, "airdate", $episode);
		//writefile(filename, data, [on_exist], [mode])
		$textstring = "[ " . $today . " ] [ TV ] [ " . $show . " ] [ " . $episode . " : " . $title . " ] [ Airdate: " . $airdate . " ]";
		writefile($newTxt, $textstring . <crlf>, "a");
		wait 100;
		}
	}

	//Adds newly added movies to textfile
	function addNewMovie($section){
		$today = now("yyyy-mm-dd");
		$title = getTitle($section);
		$year = getYear($section);
		$res = getMovieRes($section);
		$spec = getMovieSpecial($section);
		$sc = getMovieScene($section);
		$source = getMovieSource($section);
		//[ 2016-12-09 ] [ MOVIE ] [ Sherpa ] [ 2015 ] [ BluRay 720p ]
		$textstring = "[ " . $today . " ] [ MOVIE ] [ " . $title . " ] [ " . $year  . " ] [ " . $source . " " . $res . " ] ";
		if($spec){
			$textstring = $textstring . " [ " . $spec . " ] ";
		}
		if($sc){
			$textstring = $textstring . " [ " . $sc . " ] ";
		}
		$textstring = replace($textstring, "  ", " ");
		writefile($newTxt, $textstring . <crlf>, "a");
		wait 100;
	}

  // Generates movie.nfo, used for Kodi / Plex
  function generateMovieNfo($MoviePath, $imdbId){
    step;
    if(!(isMovie($MoviePath))){
      return 0;
    }
    writefile($MoviePath . "\movie.nfo", "http://www.imdb.com/title/" . $imdbId);
  }
