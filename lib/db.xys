	include "..\const\include.xys";
	
	//python json_tvmaze_omdb.py tt3107288 1 Year
	function pythonOMDB($imdb, $info){
		$data = runret('python omdb.py "' . $imdb . '" "'. $info .'"', $pytFolder);
		if(!checkPythonScriptError($data)){
			status $pythErrorText, "FF0000", "alert";
			return 0;
		}
		else{
			return removeCRLF($data);
		}
	}
	
	//Gets TVMaze data (last aired ep) with API, using python-script
	function pythonTVMazeLastEp($mazeid, $info){
		$data = runret('python tvmaze_tvmid_prevep.py "' . $mazeid . '" "'. $info .'" ', $pytFolder);
		if(!checkPythonScriptError($data)){
			if(regexmatches($data, "404"){
				return 404;
			}
			else{
				return 0;
			}
		}
		else{
			return removeCRLF($data);
		}
	}
	
	//Gets TVMaze data (next aired ep) with API, using python-script
	function pythonTVMazeNextEp($mazeid, $info){
		$data = runret('python tvmaze_tvmid_nextep.py "' . $mazeid . '" "'. $info .'" ', $pytFolder);
		if(strpos($data, "KeyError") != -1) {
			status "TVMaze: No data for next episode!", $hexOrange, "alert";
			return -1;
		}
		elseif(!checkPythonScriptError($data)){
			status $pythErrorText, "FF0000", "alert";
			return 0;
		}
		else{
			status "TVMaze: Found data for next episode!", $hexGreen, "ready";
			return removeCRLF($data);
		}
	}
	
	//Gets TVMaze data (next aired ep) with API, using python-script
	function pythonTVMazeEpisode($mazeid, $info, $episode){
		if(regexmatches($mazeid, "tt") != ""){
			msg "Error: pythonTVMazeEpisode() needs TVMaze-id, not IMDB-id!";
			status $pythErrorText, "FF0000", "alert"
			return 0;
		}
		else{
			//gets ##|## from S##E##
			$seasonepisode = regexmatches($episode, $regexD2);
			//gets first token from ##|##
			$season = gettoken($seasonepisode, 1, "|");
			//gets last token from ##|##
			$number = gettoken($seasonepisode, -1, "|");
			$data = runret('python tvmaze_tvmid_episode.py "' . $mazeid . '" "' . $season . '" "' . $number . '" "'. $info .'" ', $pytFolder);
			if(!checkPythonScriptError($data)){
				if(regexmatches($data, "404"){
					return 404;
				}
				else{
					return 0;
				}
			}
			else{
				return removeCRLF($data);
			}
		}
	}
	
	//Gets TVMaze data (show-info) with API, suing python-script
	function pythonTVMaze($mazeid, $info){
		if(isIMDBid($mazeid)){
			$data = runret('python tvmaze_imdb.py "' . $mazeid . '" "'. $info .'" ', $pytFolder);
		}
		else{
			$data = runret('python tvmaze_tvmid.py "' . $mazeid . '" "'. $info .'" ', $pytFolder);
		}
		if(!checkPythonScriptError($data)){
			if(regexmatches($data, "404"){
				return 404;
			}
			else{
				return 0;
			}
		}
		else{
			return removeCRLF($data);
		}
	}

	//Adds newly added tv-shows to textfile
	function addNewTVEpisode($episode, $show){
		$today = now("yyyy-mm-dd");
		$mazeID = getDbTVMaze($show);
		//American Dad has other season ordering on TVMaze, than releases
		if($show == "American Dad"){
			$episode = replace($episode, "S14E", "S13E");
		}
		$title = pythonTVMazeEpisode($mazeID, "name", $episode);
		$airdate = pythonTVMazeEpisode($mazeID, "airdate", $episode);
		//writefile(filename, data, [on_exist], [mode]) 
		$textstring = "[ " . $today . " ] [ TV ] [ " . $show . " ] [ " . $episode . " : " . $title . " ] [ Airdate: " . $airdate . " ]";
		writefile($newTxt, $textstring . <crlf>, "a");
		wait 100;
		}
	}
	
	//Moves new.txt to ds/info and backups .db files
	function backupDBfiles(void){
		$now = now("yyyy-mm-dd-hh-nn");
		$backupFolder = new("D:\Google Drive\Scriptstuff\MediaDb\bak\" . $now, "dir");
		backupto $dsInfo, $newTxt;
		backupto $dsInfo, $missingEpsTxt;
		backupto $backupFolder, $newTxt;
		backupto $backupFolder, $missingEpsTxt;
		$dbFiles = listfolder($dbFolder, "*.db", 1);
		//$dbFiles = quicksearch("*.db", $dbFolder, "|");
		copyto $backupFolder , $dbFiles;
	}
	
	//Adds newly added movies to textfile
	function addNewMovie($section){
		$today = now("yyyy-mm-dd");
		$title = getTitle($section);
		$year = getYear($section);
		$res = getMovieRes($section);
		$spec = getMovieSpecial($section);
		$sc = getMovieScene($section);
		$source = getMovieSource($section);
		//[ 2016-12-09 ] [ MOVIE ] [ Sherpa ] [ 2015 ] [ BluRay 720p ]
		$textstring = "[ " . $today . " ] [ MOVIE ] [ " . $title . " ] [ " . $year  . " ] [ " . $source . " " . $res . " ] ";
		if($spec){
			$textstring = $textstring . " [ " . $spec . " ] ";
		}
		if($sc){
			$textstring = $textstring . " [ " . $sc . " ] ";
		}
		$textstring = replace($textstring, "  ", " ");
		writefile($newTxt, $textstring . <crlf>, "a");
		wait 100;
	}
	
	//Writes data to TV Database
	function setDbTVinfo($section, $data, $key){
		setkey $data, $key, $section, $dbTV;
	}
	
	//Writes data to Movie Database
	function setDbMovieInfo($section, $data, $key){
		setkey $data, $key, $section, $dbFilm;
	}
	
	//Reads data from TV Database
	function getDbTVinfo($section, $key){
		$data = getkey($key, $section, $dbTV);
		//Data not found, return 0
		if($data == ""){
			return 0;
		}
		else{
			return $data;
		}
	}
	
	//Reads data from Movie Database
	function getDbMovieInfo($section, $key){
		$data = getkey($key, $section, $dbFilm);
		//Data not found, return 0
		if($data == ""){
			return 0;
		}
		else{
			return $data;
		}
	}
	
	//Writes data to Movie Database
	function setDbMovieInfo($section, $data, $key){
		setkey $data, $key, $section, $dbFilm;
	}
	
	//Section is folder name for tv-show
	//Gets IMDB from TV database
	function getDbTVIMDb($section){
		return getDbTVinfo($section, "imdb");
	}
	
	//Section is folder name for tv-show
	//Gets IMDB from TV database
	function getDbMovieIMDb($section){
		return getDbMovieInfo($section, "imdb");
	}
	
	//Section is folder name for tv-show
	//Gets TVMaze ID from TV database
	function getDbTVMaze($section){
		return getDbTVinfo($section, "tvmaze");
	}	
	
	//Section is folder name for tv-show
	//Sets IMDB-id to TV database
	function setDbTVIMDb($section, $data){
		setDbTVinfo($section, $data, "imdb");
	}

	//Section is folder name for tv-show
	//Sets IMDB-id to TV database
	function setDbMovieIMDb($section, $data){
		setDbMovieInfo($section, $data, "imdb");
	}	
	
	//Section is folder name for tv-show
	//Sets TVMaze ID to TV database
	function setDbTVMaze($section, $data){
		setDbTVinfo($section, $data, "tvmaze");
	}
	
	//Section is folder name for tv-show
	//Sets list of current files in show-folder
	//Keeps record of last list
	function setDBTVFiles($section){
		$path = $dsTV . $section;
		$data = getLocalTVFiles($path);
		$data = episodeSorter($data);
		$oldList = getkey("files", $section, $dbTVep);
		setkey $data, "files", $section, $dbTVep;
		setkey $oldList, "files_pre", $section, $dbTVep;
	}

	function setDBMovieFiles($section){
		$movieLetter = getMovieLetter($section);
		$path = $dsFilm . $movieLetter;
		$data = listfolder($path, , 6);
		if(!exists($path . "\" . $section)){
			msg "Movie is not in correct letter!?";
		}
		else{
			setkey $data, "files", $movieLetter, $dbFilmList;
		}
	}
	
	function setDBMovieFilesByLetter($movieLetter){
		$path = $dsFilm . $movieLetter;
		$data = listfolder($path, , 6);
		setkey $data, "files", $movieLetter, $dbFilmList;
	}

	//Gets list of files in database
	function getDBTVFiles($section){
		if(isIMDBid($section)){
			msg "Error: getDBTVFiles() has gotten IMDB-id as passed argument!";
		}
		else{
			return getkey("files", $section, $dbTVep);
		}
	}
	
	//Gets list of files in database, from movie
	function getDBMovieFiles($section){
		$movieLetter = getMovieLetter($section);
		return getkey("files", $movieLetter, $dbFilmList);
	}
	
	//Gets list of files in database, from letter
	function getDBMovieFilesByLetter($movieLetter){
		return getkey("files", $movieLetter, $dbFilmList);
	}
	
	//Gets TVMaze ID from TVMaze Database
	function getTVMaze($section){
		$imdb = getDbTVIMDb($section);
		$data = pythonTVMaze($imdb, "id");
		//Checks response from python function
		if((strlen($data) > 10) || ($data == 0) || ($data == 404)){
			return 0;
		}
		else {
			return $data;
		}
	}
	
	//Gets Title of Movie / TV-show from OMDB with python-script
	function getTitle($section){
		$imdb = getDbMovieIMDb($section);
		if(!isset($imdb)){
			$imdb = getDbTVIMDb($section);
		}
		$data = pythonOMDB($imdb, "Title");
		status "Got title from OMDB: " . $data, "0000FF", "progress";
		return $data;
	}
	
	//Gets Year of Movie / TV-show from OMDB with python-script
	function getYear($section){
		$imdb = getDbMovieIMDb($section);
		if(!$imdb){
			$imdb = getDbTVIMDb($section);
		}
		$data = pythonOMDB($imdb, "Year");
		status "Got year from OMDB: " . $data, "0000FF", "progress";
		if(strlen($data) > 4){
			$data = regexmatches($data, $regexD4);
			if(gettoken($data, "count", |) > 1){
				$startyear = gettoken($data, 1, |);
				$endyear = gettoken($data, -1, |);
				return $startyear . "-" . $endyear;
			}
			else{
				return $data . "-";
			}
		}
		else{
			return $data;
		}
	}
	
	//Gets Genre of Movie / TV-show from OMDB with python-script
	function getGenre($section){
		$imdb = getDbMovieIMDb($section);
		if(!$imdb){
			$imdb = getDbTVIMDb($section);
		}
		$data = pythonOMDB($imdb, "Genre");
		//If OMDB returns N/A as genre, gets from TVMaze API
		if($data == "N/A"){
			$mazeid = getDbTVMaze($section);
			$data = pythonTVMaze($mazeid, "genres");
			$data = replace($data, "'");
			$data = replace($data, "[");
			$data = replace($data, "]");
		}
		status "Got genre from OMDB: " . $data, "0000FF", "progress";
		return $data;
	}
	

	//Sets Genre of TV-show to TV Database
	function setDbTVGenre($section, $data){
		setDbTVinfo($section, $data, "genre");
	}
	
	//Sets Genre of Movie to movie Database
	function setDbMovieGenre($section, $data){
		setDbMovieInfo($section, $data, "genre");
	}
	
	//Section is folder name for tv-show
	//Gets year from TV database
	function getDbTVGenre($section){
		return getDbTVinfo($section, "genre");
	}
	

	
	//Sets last local episode of TV-show to TV Database
	function setDbTVLocalEp($section, $data){
		setDbTVinfo($section, $data, "localep");
	}	
	
	function getDbTVLocalEp($section){
		return getDbTVinfo($section, "localep");
	}
	
	//Sets Year of TV-show to TV Database
	function setDbTVYear($section, $data){
		setDbTVinfo($section, $data, "year");
	}	
	
	//Sets Genre of Movie to movie Database
	function setDbMovieYear($section, $data){
		setDbMovieInfo($section, $data, "year");
	}
	
	//Sets title of Movie to movie Database
	function setDbMovieTitle($section, $data){
		setDbMovieInfo($section, $data, "title");
	}
	
	//Section is folder name for tv-show
	//Gets year from TV database
	function getDbTVYear($section){
		return getDbTVinfo($section, "year");
	}

	//Gets Rating of Movie / TV-show from OMDB with python-script
	function getRating($section){
		$imdb = getDbTVIMDb($section);
		return pythonOMDB($imdb, "imdbRating");
	}
	
	//Gets airdate for last aired episode
	function getLastAiredDate($section){
		$mazeid = getDbTVMaze($section);
		return pythonTVMazeLastEp($mazeid, "airdate");
	}


	
	//Gets airdate for next unaired episode
	function getNextAiredDate($section){
		$mazeid = getDbTVMaze($section);
		$data = pythonTVMazeNextEp($mazeid, "airdate");
		if($data == -1){
			return "No data for next episode!";
		}
		else {
			return $data;
		}
	}

	//Gets next unaired episode
	function getNextAiredEpisode($section){
		$mazeid = getDbTVMaze($section);
		//API JSON : "season":6,"number":10
		$season = pythonTVMazeNextEp($mazeid, "season");
		if($season == -1){
			return "No data for next episode!";
		}
		else{
			$episode = pythonTVMazeNextEp($mazeid, "number");
			// format(1, "000"); //001
			$season = format($season, "00");
			$episode = format($episode, "00");
			return "S" . $season . "E" . $episode;
		}
	}
	
	//Gets status of tv show: ended/running etc
	function TVshowStatus($section){

		$mazeid = getDbTVMaze($section);
		return pythonTVMaze($mazeid, "status");
	}

	//Sets status of TV-show to TV Database
	function setDbTVStatus($section, $data){
		setDbTVinfo($section, $data, "status");
	}		
	
	//Checks if episode exists in TVMaze database
	function TVEpisodeStatus($tvmazeid, $episode){
		$name = pythonTVMazeEpisode($tvmazeid, "name", $episode);
		if($name == 404){
			return 0;
		}
		else {
			return 1;
		}
	}
	
	//Checks if episode exists in TVMaze database
	function TVEpisodeAirdate($tvmazeid, $episode){
		return pythonTVMazeEpisode($tvmazeid, "airdate", $episode);
	}
	
	//Gets last aired episode
	function getLastAiredEpisode($section){
		$mazeid = getDbTVMaze($section);
		//API JSON : "season":6,"number":10
		$season = pythonTVMazeLastEp($mazeid, "season");
		$episode = pythonTVMazeLastEp($mazeid, "number");
		// format(1, "000"); //001
		$season = format($season, "00");
		$episode = format($episode, "00");
		return "S" . $season . "E" . $episode;
	}
	
	//Sets last aired episode of TV-show to TV Database
	function setDbTVLastAired($section, $data){
		setDbTVinfo($section, $data, "lastaired");
	}
	
	function setDbTVLastAiredDate($section, $data){
		setDbTVinfo($section, $data, "lastaireddate");
	}
	
	function getDbTVLastAiredDate($section, $data){
		return getDbTVinfo($section, "lastaireddate");
	}

	function getDbTVStatus($section){
		return getDbTVinfo($section, "status");
	}
	
	//Sets next aired episode of TV-show to TV Database
	function setDbTVNextAired($section, $data){
		setDbTVinfo($section, $data, "nextaired");
	}		
	
	//Sets next aired episode of TV-show to TV Database
	function setDbTVNextAiredDate($section, $data){
		setDbTVinfo($section, $data, "nextaireddate");
	}
	
	function getDbTVNextAiredDate($section){
		return getDbTVinfo($section, "nextaireddate");
	}
	
	//Returns 0 if python script returned error
	function checkPythonScriptError($string){
		if(regexmatches($string, "Traceback") != ""){
			return 0;
		}
		else{
			return 1;
		}
	}