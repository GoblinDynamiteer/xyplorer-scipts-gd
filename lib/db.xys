	perm $dbTV = "D:\Google Drive\Scriptstuff\MediaDb\tv.db";
	perm $dbTVep = "D:\Google Drive\Scriptstuff\MediaDb\tvep.db";
	perm $dbFilm = "D:\Google Drive\Scriptstuff\MediaDb\film.db";
	perm $pytFolder = "D:\Google Drive\Scriptstuff\xyplorer\python\";

	perm $pythErrorText =  "Python script returned error!";
	
	//Gets IMDB-id from string, returns ID in format tt######
	function trimIMDB($string){
		//example input string: http://www.imdb.com/title/tt0103064/
		//returns tt0103064
		$id = regexmatches($string, $regexIMDB);
		if($id == ""){
			msg "Could not extract IMDb-id from string!";
			return 0;
		}
		else{
			return $id;
		}
	}
	
	//python json_tvmaze_omdb.py tt3107288 1 Year
	function pythonOMDB($imdb, $info){
		$data = runret('python tvmaze_omdb.py "' . $imdb . '" 1 "'. $info .'"', $pytFolder);
		if(!checkPythonScriptError($data)){
			msg $pythErrorText;
			return 0;
		}
		else{
			return removeCRLF($data);
		}
	}
	
	//Gets TVMaze data (last aired ep) with API, using python-script
	function pythonTVMazeLastEp($imdb, $info){
		$data = runret('python tvmaze_omdb.py "' . $imdb . '" 2 "lastAired" "'. $info .'" ', $pytFolder);
		if(!checkPythonScriptError($data)){
			if(regexmatches($data, "404"){
				return 404;
			}
			else{
				return 0;
			}
		}
		else{
			return removeCRLF($data);
		}
	}
	
	//Gets TVMaze data (next aired ep) with API, using python-script
	function pythonTVMazeNextEp($imdb, $info){
		$data = runret('python tvmaze_omdb.py "' . $imdb . '" 2 "nextAired" "'. $info .'" ', $pytFolder);
		if(!checkPythonScriptError($data)){
			msg $pythErrorText;
			return 0;
		}
		else{
			return removeCRLF($data);
		}
	}
	
	//Gets TVMaze data (next aired ep) with API, using python-script
	function pythonTVMazeEpisode($mazeid, $info, $episode){
		if(regexmatches($mazeid, "tt") != ""){
			msg "Error: pythonTVMazeNextEp() needs TVMaze-id, not IMDB-id!";
			return 0;
		}
		else{
			//gets ##|## from S##E##
			$seasonepisode = regexmatches($episode, $regexD2);
			//gets first token from ##|##
			$season = gettoken($seasonepisode, 1, "|");
			//gets last token from ##|##
			$number = gettoken($seasonepisode, -1, "|");
			$data = runret('python tvmaze_omdb.py "' . $mazeid . '" 3 "epCheck" "' . $season . '" "' . $number . '" "'. $info .'" ', $pytFolder);
			if(!checkPythonScriptError($data)){
				if(regexmatches($data, "404"){
					return 404;
				}
				else{
					return 0;
				}
			}
			else{
				return removeCRLF($data);
			}
		}
	}
	
	//Gets TVMaze data (show-info) with API, suing python-script
	function pythonTVMaze($imdb, $info){
		$data = runret('python tvmaze_omdb.py "' . $imdb . '" 2 "'. $info .'" ', $pytFolder);
		if(!checkPythonScriptError($data)){
			if(regexmatches($data, "404"){
				return 404;
			}
			else{
				return 0;
			}
		}
		else{
			return removeCRLF($data);
		}
	}

	//Writes data to TV Database
	function setDbTVinfo($section, $data, $key){
		setkey $data, $key, $section, $dbTV;
	}
	
	//Reads data from TV Database
	function getDbTVinfo($section, $key){
		$data = getkey($key, $section, $dbTV);
		//Data not found, return 0
		if($data == ""){
			return 0;
		}
		else{
			return $data;
		}
	}
	
	//Writes data to Movie Database
	function setDbMovieInfo($section, $data, $key){
		setkey $data, $key, $section, $dbFilm;
	}
	
	//Section is folder name for tv-show
	//Gets IMDB from TV database
	function getDbTVIMDb($section){
		return getDbTVinfo($section, "imdb");
	}
	
	//Section is folder name for tv-show
	//Gets TVMaze ID from TV database
	function getDbTVMaze($section){
		return getDbTVinfo($section, "tvmaze");
	}	
	
	//Section is folder name for tv-show
	//Sets IMDB-id to TV database
	function setDbTVIMDb($section, $data){
		setDbTVinfo($section, $data, "imdb");
	}

	//Section is folder name for tv-show
	//Sets TVMaze ID to TV database
	function setDbTVMaze($section, $data){
		setDbTVinfo($section, $data, "tvmaze");
	}
	
	//Section is folder name for tv-show
	//Sets list of current files in show-folder
	//Keeps record of last list
	function setDBTVFiles($section){
		$path = "\\DS\TV\" . $section;
		$data= getLocalTVFiles($path);
		$oldList = getkey("files", $section, $dbTVep);
		setkey $data, "files", $section, $dbTVep;
		setkey $oldList, "files_pre", $section, $dbTVep;
	}

	//Gets list of files in database
	function getDBTVFiles($section){
		if(isIMDBid($section)){
			msg "Error: getDBTVFiles() has gotten IMDB-id as passed argument!";
		}
		else{
			return getkey("files", $section, $dbTVep);
		}
	}
	
	//Gets TVMaze ID from TVMaze Database
	function getTVMaze($imdb){
		$data = pythonTVMaze($imdb, "id");
		//Checks response from python function
		if((strlen($data) > 10) || ($data == 0) || ($data == 404)){
			return 0;
		}
		else {
			return $data;
		}
	}
	
	//Gets Title of Movie / TV-show from OMDB with python-script
	function getTitle($imdb){
		return pythonOMDB($imdb, "Title");
	}
	
	//Gets Year of Movie / TV-show from OMDB with python-script
	function getYear($imdb){
		$data = pythonOMDB($imdb, "Year");
		if(strlen($data) > 4){
			$data = regexmatches($data, $regexD4);
			if(gettoken($data, "count", |) > 1){
				$startyear = gettoken($data, 1, |);
				$endyear = gettoken($data, -1, |);
				return $startyear . "-" . $endyear;
			}
			else{
				return $data . "-";
			}
		}
		else{
			return $data;
		}
	}
	
	//Gets Genre of Movie / TV-show from OMDB with python-script
	function getGenre($imdb){
		return pythonOMDB($imdb, "Genre");
	}
	

	//Sets Genre of TV-show to TV Database
	function setDbTVGenre($section, $data){
		setDbTVinfo($section, $data, "genre");
	}
	
	//Sets last local episode of TV-show to TV Database
	function setDbTVLocalEp($section, $data){
		setDbTVinfo($section, $data, "localep");
	}	
	
	//Sets Year of TV-show to TV Database
	function setDbTVYear($section, $data){
		setDbTVinfo($section, $data, "year");
	}	
	
	//Gets Rating of Movie / TV-show from OMDB with python-script
	function getRating($imdb){
		return pythonOMDB($imdb, "imdbRating");
	}
	
	//Gets airdate for last aired episode
	function getLastAiredDate($imdb){
		return pythonTVMazeLastEp($imdb, "airdate");
	}
	
	//Gets airdate for next unaired episode
	function getNextAiredDate($imdb){
		return pythonTVMazeNextEp($imdb, "airdate");
	}
	
	//Gets next unaired episode
	function getNextAiredEpisode($imdb){
		//API JSON : "season":6,"number":10
		$season = pythonTVMazeNextEp($imdb, "season");
		$episode = pythonTVMazeNextEp($imdb, "number");
		// format(1, "000"); //001
		$season = format($season, "00");
		$episode = format($episode, "00");
		return "S" . $season . "E" . $episode;
	}
	
	//Gets status of tv show: ended/running etc
	function TVshowStatus($imdb){
		return pythonTVMaze($imdb, "status");
	}
	
	//Checks if episode exists in TVMaze database
	function TVEpisodeStatus($tvmazeid, $episode){
		$name = pythonTVMazeEpisode($tvmazeid, "name", $episode);
		if($name == 404){
			return 0;
		}
		else {
			return 1;
		}
	}
	
	//Checks if episode exists in TVMaze database
	function TVEpisodeAirdate($tvmazeid, $episode){
		return pythonTVMazeEpisode($tvmazeid, "airdate", $episode);
	}
	
	//Gets last aired episode
	function getLastAiredEpisode($imdb){
		//API JSON : "season":6,"number":10
		$season = pythonTVMazeLastEp($imdb, "season");
		$episode = pythonTVMazeLastEp($imdb, "number");
		// format(1, "000"); //001
		$season = format($season, "00");
		$episode = format($episode, "00");
		return "S" . $season . "E" . $episode;
	}
	
	//Returns 0 if python script returned error
	function checkPythonScriptError($string){
		if(regexmatches($string, "Traceback") != ""){
			return 0;
		}
		else{
			return 1;
		}
	}