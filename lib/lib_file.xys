    include_once "..\const\include.xys";

    //Moves new.txt to ds/info and backups .db files
    function file_backup_database(void)
    {
        $now = now("yyyy-mm-dd-hh-nn");
        $backup_folder = new($PATH_SCRIPT_LOCATION ."MediaDb\bak\" . $now, "dir");

        backupto $PATH_DS_INFO, $PATH_NEW_TXT;
        backupto $PATH_DS_INFO, $PATH_MISSING_EPISODES_TXT;
        backupto $backup_folder, $PATH_NEW_TXT;
        backupto $backup_folder, $PATH_MISSING_EPISODES_TXT;
        backupto $backup_folder, $PATH_LOG_TXT;

        $db_files = listfolder($PATH_DB_LOCATION, "*.db", 1);

        copyto $backup_folder , $db_files;
    }

    function file_list_files_with_extension($folder, $extension)
    {
        return quicksearch("*" . $extension, $folder, |);
    }

    //Returns list of video files in path, in subfolders
    function file_list_video_files($path)
    {
        $list =  "";

        foreach($ext, $VIDEO_FILE_EXTENSIONS, "|")
        {
            $list = $list . file_list_files_with_extension($path, $ext);
        }

        $data = replace($list, $path . "\");
        return $data;
    }

    function file_tv_list_seasons_in_path($path)
    {
        $data = listfolder($path, $SETTING_LISTFOLDER_PATTERN_ALL,
            $SETTING_LISTFOLDER_NO_FILES + $SETTING_LISTFOLDER_NO_PATHS);

        return $data;
    }

    function file_tv_get_last_season_in_path($path)
    {
        $data = file_tv_list_seasons_in_path($path);
        $data = list_get_last_item($data);
        return $data;
    }

    //Finds and returns the last episode
    function file_tv_get_last_episode_in_path($path)
    {
        status "Getting episode file list", "0000FF", "progress";

        $seasonFolders = file_tv_list_seasons_in_path($path);
        $lastSeason = list_get_last_item($seasonFolders);
        $files = file_list_video_files($path . "\" . $lastSeason);
        $episodes = string_regex_season_episode($files);
        $episodes = list_sort($episodes);

        return recase(list_get_last_item($episodes), "upper");
    }

    //Adds newly added tv-shows to textfile
    function file_add_new_episode($episode, $tv_show)
    {
        $today = now("yyyy-mm-dd");
        $maze_id = db_tv_read_data($tv_show, "tvmaze");

        $season_number = string_regex_season_from_season_episode($episode);
        $episode_number = string_regex_episode_from_season_episode($episode);

        $title = python_tvmaze(
            $maze_id, "title", $season_number, $episode_number);
        $airdate = python_tvmaze(
            $maze_id, "release_date", $season_number, $episode_number);

        if(python_script_error($title))
        {
            $title = " -- ";
        }

        if(python_script_error($airdate))
        {
            $airdate = "N/A";
        }

        $string = "[ " . $today . " ] [ TV ] [ " . $tv_show . " ] [ " .
            $episode . " : " . $title . " ] [ Airdate: " . $airdate . " ]";

        writefile($PATH_NEW_TXT, $string . $LINE_BREAK,
            $WRITEFILE_ON_EXIST_APPEND);

        status "Added episode: " . $tv_show . " - S" . $season_number .
            "E" . $episode_number . ": " . $title;

        log_new_tv($tv_show, $episode);

        wait 100;
    }

    /* Add movie to new.txt */
    function file_add_new_movie($movie_folder_name, $imdb)
    {
        $today =    now("yyyy-mm-dd");
        $year =     python_omdb($imdb, "year");
        $title =    python_omdb($imdb, "title");
        $res =      string_regex_movie_resolution($movie_folder_name);
        $spec =     string_regex_movie_special($movie_folder_name);
        $sc =       string_regex_movie_scene($movie_folder_name);
        $source =   string_regex_movie_source($movie_folder_name);

        if(python_script_error($year))
        {
            $year = "N/A";
        }

        if(python_script_error($title))
        {
            $title = $movie_folder_name;
        }

        $string = "[ " . $today . " ] [ MOVIE ] [ " . $title . " ] [ " .
        $year  . " ] [ " . $source . " " . $res . " ] ";

        if($spec)
        {
            $string = $string . " [ " . $spec . " ] ";
        }

        if($sc)
        {
            $string = $string . " [ " . $sc . " ] ";
        }

        $string = replace($string, "  ", " ");

        writefile($PATH_NEW_TXT, $string . $LINE_BREAK,
            $WRITEFILE_ON_EXIST_APPEND);

        wait 100;
    }

    /* Generates movie.nfo, used for Kodi / Plex  */
    function file_generate_movie_nfo($movie_path, $imdb)
    {
        if(!(check_is_path_in_dsmovie($movie_path)))
        {
            return $FUNCTION_RETURN_ERROR;
        }
        writefile($movie_path . "\movie.nfo", "http://www.imdb.com/title/" . $imdb);
    }

    /* Generates tvshow.nfo, used for Kodi / Plex  */
    function file_generate_tv_nfo($tv_path, $thetvdburl)
    {
        if(!(check_is_path_in_dstv($tv_path)))
        {
            msg $ERROR_PATH_NOT_DS_TV;
            return $FUNCTION_RETURN_ERROR;
        }

        $thetvdburl = string_thetvdb_fix_url($thetvdburl);

        if($thetvdburl)
        {
            writefile($tv_path . "\tvshow.nfo", $thetvdburl);
        }

        else
        {
            msg $ERROR_FILE_WRITE_TVSHOW_NFO;
            return $FUNCTION_RETURN_ERROR;
        }
    }

    /*  List foldes in DS/TV */
    function file_list_all_tv_show_folders(void)
    {
        $data = listfolder($PATH_DS_TV, $SETTING_LISTFOLDER_PATTERN_ALL,
            $SETTING_LISTFOLDER_NO_FILES + $SETTING_LISTFOLDER_NO_PATHS);

        return $data;
    }

    /*  List folders and subfolders in DS/Movie */
    function file_list_all_movie_folders(void)
    {
        $letters = listfolder($PATH_DS_MOVIE, $SETTING_LISTFOLDER_PATTERN_ALL,
            $SETTING_LISTFOLDER_NO_FILES + $SETTING_LISTFOLDER_NO_PATHS);

        $list = "";

        foreach($letter, $letters, "|")
        {
            $list = $list . "|" . listfolder($PATH_DS_MOVIE . $letter);
        }

        return $list;
    }
