    perm $exe_path_7zip = "C:\Program Files\7-Zip\7z.exe";
    perm $exe_path_subtitleedit =
        "C:\Program Files\Subtitle Edit 3\SubtitleEdit.exe";

    /* Searches for executable, returns full path */
    function app_find_executable($file_name)
    {
        $search_paths = readfile($PATH_EXEC_SEARCH_PATHS_TXT);

        foreach($path, $search_paths, $NEW_LINE)
        {
            /* Get subfolders */
            $sub_folders = listfolder($path, $SETTING_LISTFOLDER_PATTERN_ALL,
                $SETTING_LISTFOLDER_NO_FILES);

            /*  Todo: Fix search in %user% %appdata% etc, can't load from
                text-file, says location is unavailable */

            foreach($folder, $sub_folders)
            {
                status "Searching for " . $file_name  . " in " . $folder;
                $search_hit = quicksearch($file_name, $folder);

                if($search_hit)
                {
                    /* Todo: Return last/first hit if several */
                    status "Found ". $file_name . "!";
                    return $search_hit;
                }
            }
        }
    }

    /* Extract file with unrar.exe */
    function app_extraction_unrar($source, $destination, $wait)
    {
        $wait = $wait ? 2 : 0;

        if(!exists($destination))
        {
            new($destination, "dir");
            wait 100;
        }

        status "Unraring: ". $source, 000000, progress;

        run '"' . $EXE_LOCATION_UNRAR . '" x "' . $source . '" "' .
            $destination . '"', , $wait, 2;
    }

    /* Compile and upload with Arduino */
    function app_code_arduino_open_upload($file, $upload_only)
    {
        if( !isset($arduino_debug_exe) ||
            !check_is_path_to_exe($arduino_debug_exe) ||
            !exists($arduino_debug_exe))
        {
            perm $arduino_debug_exe = app_find_executable("arduino_debug.exe");
            writepv($PATH_PERM_PV_DIR);
        }

        if( !isset($arduino_ide_exe) ||
            !check_is_path_to_exe($arduino_ide_exe) ||
            !exists($arduino_ide_exe)) || 1
        {
            perm $arduino_ide_exe = app_find_executable("arduino.exe");
            writepv($PATH_PERM_PV_DIR);
        }

        $upload = (isset($upload_only) && $upload_only) ?
            "--upload -v" : "";
        $exe = (isset($upload_only) && $upload_only) ?
            $arduino_debug_exe : $arduino_ide_exe;

        run '"' . $exe . '" "' . $file . '"' .
            $upload, , 0, 2;
    }

    /* Run filezilla and open local folder */
    function app_ftp_open_in_filezilla($folder)
    {
        if( !isset($exe_path_filezilla) ||
            !check_is_path_to_exe($exe_path_filezilla) ||
            !exists($exe_path_filezilla))
        {
            perm $exe_path_filezilla = app_find_executable("filezilla.exe");
            writepv($PATH_PERM_PV_DIR);
        }

        if(exists($exe_path_filezilla))
        {
            run '"' . $exe_path_filezilla . '" -c "' .
                readfile($PATH_FILEZILLA_W_SITE) . '" --local="' .
                    $folder . '"';
        }

        else
        {
            msg $ERROR_EXE_NOT_FOUND_FILEZILLA;

            //Set manually?
        }
    }

    /* Compress to rar-file, return full path to created file */
    function app_compress_rar($filename, $source, $location, $switch)
    {
        run '"' . $EXE_LOCATION_RAR . '" ' . $switch . ' "' . $location .
            $filename . '.rar" "' . $source . '"', , 1, 1;
        return $location . $filename . ".rar";
    }

    /* Compress to 7z-file, return full path to created file */
    function app_compress_sevenzip($filename, $source, $location, $switch)
    {
        run '"' . $EXE_LOCATION_7ZA . '" ' . $switch . ' "' . $location .
            $filename . '.7z" "' . $source . '"', , 1, 1;
        return $location . $filename . ".7z";
    }

    /* Extract with 7z.exe */
    function app_extract_sevenzip($source, $destination, $wait)
    {
        $wait = $wait ? 2 : 0;

        if(!exists($destination))
        {
            new($destination, "dir");
            wait 100;
        }
        status "Extracting: ". $source, 000000, progress;

        run '"' . $exe_path_7zip . '" x "' . $source . '" -o"' .
            $destination . '"', , $wait, 2;
    }

    /* Extract subtitles with MKVExtract */
    function app_subtitle_mkvextract($source, $track_numbers)
    {
        $path = getpathcomponent($source, "path");
        $base = getpathcomponent($source, "base");
        $output_file = "";
        foreach($track_number, $track_numbers)
        {
            $output_file = $track_number . ':"' . $path . '\' . $base . '_' .
                $track_number . '.srt" ' . $output_file;
        }

        status "Extracting SRT from ". $source, 000000, progress;
        run '"' . $EXE_LOCATION_MKVEXTRACT . '" tracks "' . $source . '" '.
            $output_file, , 1, 2;
    }

    /* Open file in MKVinfo */
    function app_video_mkv_info($source)
    {
        return runret($EXE_LOCATION_MKVINFO . ' "' . $source . '"');
    }

    /* Open file or folder in Atom */
    function app_text_open_in_atom($path)
    {
        run 'atom "' . $path . '"';
    }

    /* Open repository path in GitKraken */
    function app_git_openrepo_kraken($repository_path)
    {
        if( !isset($exe_path_gitkraken) ||
            !check_is_path_to_exe($exe_path_gitkraken) ||
            !exists($exe_path_gitkraken))
        {
            $search_dir = %USERPROFILE% . "\AppData\Local\gitkraken\";
            $executables = quicksearch("gitkraken.exe", $search_dir, "|", s);
            perm $exe_path_gitkraken = list_get_last_item($executables);

            writepv($PATH_PERM_PV_DIR);
        }

        if(exists($exe_path_gitkraken))
        {
            run '"'. $exe_path_gitkraken .'" -p "' . $repository_path . '"';
        }

        else
        {
            msg $ERROR_EXE_NOT_FOUND_GITKRAKEN;
        }

    }

    /* SHH Connection with putty */
    function app_ssh_putty($address, $user, $port)
    {
        run '"'. $EXE_LOCATION_PUTTY .'"' .
            " -ssh " . $user . "@" . $address . " " . $port;
    }

    /* Open Git-Bash to and navigate to path */
    function app_git_openrepo_bash($path)
    {
        if( !isset($exe_path_gitbash) ||
            !check_is_path_to_exe($exe_path_gitbash) ||
            !exists($exe_path_gitbash))
        {
            $search_dir = "C:\Program Files\";
            $executables = quicksearch("git-bash.exe", $search_dir, "|", s);
            perm $exe_path_gitbash = list_get_last_item($executables);

            writepv($PATH_PERM_PV_DIR);
        }

        if(exists($exe_path_gitbash))
        {
            /* Convert 'C:\Path\Path Path' ==> 'C/Path/Path\ Path' */
            $path = replacelist($path, ":|\| ", "|/|\ ", "|");

            /* Workaround for opening path (could not find CLI command to
                open path): edit .bashrc */
            writefile(%USERPROFILE% . "\.bashrc", "cd /" . $path);
            open $exe_path_gitbash;
        }

        else
        {
            msg $ERROR_EXE_NOT_FOUND_GITBASH;
        }
    }
