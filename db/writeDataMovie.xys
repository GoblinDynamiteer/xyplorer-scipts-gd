 include "..\lib\getSelectionInfo.xys";
 include "..\lib\getFileInfo.xys";
 include "..\lib\db.xys";
 include "..\lib\regex.xys";
 include "..\lib\list.xys";
 include "..\lib\securityChecks.xys";
 include "..\lib\string.xys";
 include "..\lib\xyplorerCommands";
	//Lists and returns folders with full path in NAS movie directory, 
	//separated with | (default)
	$movieLetters = listfolder($dsFilm,, 6);
	$runBackup = 0;
	foreach($letter, $movieLetters){
		//Lists and returns movie folders in letter-folder
		$localFolders = listfolder($dsFilm . $letter, , 6);
		$dbFolders = getDBMovieFilesByLetter($letter);
		status "Checking for new movies in: " . $letter;
		if($localFolders != $dbFolders){
			$runBackup = 1;
			wait 1;
			foreach($localMovie, $localFolders){
				//New movie found, will ask for IMDB input:
				if(strpos($dbFolders , $localMovie) == -1){
					status "Found new movie: " . $localMovie;
					$imdbID = input("Found new movie!", 
					"Enter IMDB-id / URL for " . $localMovie);
					$imdbID = trimIMDB($imdbID);
					//ends script if IMDB-id incorrect, to prevent writing new
					//movies to databas
					if(!$imdbID){
						end 1; 
					}
					//Sets DB data for new movie
					setDbMovieIMDb($localMovie, $imdbID);
					$title = getTitle($localMovie);
					$year = getYear($localMovie);
					$genre = getGenre($localMovie);
					setDbMovieGenre($localMovie, $genre);
					setDbMovieYear($localMovie, $year);
					setDbMovieTitle($localMovie, $title);
					status "Data set for: " . $localMovie;
					//Lists movie as newly added
					addNewMovie($localMovie);
				}
			}
			//Updates list of movies in database
			setDBMovieFilesByLetter($letter);
		}
		wait 1;
	}
	//Moves new.txt to ds/info and backups .db files
	if($runBackup){
		backupDBfiles();
	}
	status "Done!";
	releaseglobals 3;
	end 1;

